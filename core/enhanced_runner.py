# -*- coding: utf-8 -*-
"""
Enhanced Shamela Runner - ุณูุฑุจุช ุชุดุบูู ูุญุณู ููููุชุจุฉ ุงูุดุงููุฉ
ูุฌูุน ุฌููุน ุงููุธุงุฆู ุงููุญุณูุฉ ูู ูุงุฌูุฉ ูุงุญุฏุฉ ุณููุฉ ุงูุงุณุชุฎุฏุงู

ุงูููุฒุงุช:
- ุงุณุชุฎุฑุงุฌ ุงููุชุจ ูุน ุฌููุน ุงูุชุญุณููุงุช
- ุญูุธ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญุณูุฉ
- ุฅูุดุงุก ุชูุงุฑูุฑ ุดุงููุฉ
- ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุงููุญุณูุฉ
"""

import os
import sys
import json
import logging
import argparse
from datetime import datetime
from pathlib import Path

# ุฅุถุงูุฉ ุงููุฌูุฏ ุงูุญุงูู ููู path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

try:
    from enhanced_shamela_scraper import scrape_enhanced_book, save_enhanced_book_to_json, PerformanceConfig
    from enhanced_database_manager import EnhancedShamelaDatabaseManager, save_enhanced_json_to_database
except ImportError as e:
    print(f"ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ุงููุญุฏุงุช: {e}")
    print("ุชุฃูุฏ ูู ูุฌูุฏ ูููุงุช enhanced_shamela_scraper.py ู enhanced_database_manager.py")
    sys.exit(1)

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('enhanced_shamela_runner.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def print_header():
    """ุทุจุงุนุฉ ุฑุฃุณ ุงูุจุฑูุงูุฌ"""
    print("=" * 60)
    print("ุณูุฑุจุช ุงูููุชุจุฉ ุงูุดุงููุฉ ุงููุญุณู")
    print("Enhanced Shamela Scraper")
    print("=" * 60)
    print()

def print_separator():
    """ุทุจุงุนุฉ ูุงุตู"""
    print("-" * 60)

def extract_book_full(book_id: str, max_pages: int = None, output_dir: str = None, 
                     config: PerformanceConfig = None) -> dict:
    """
    ุงุณุชุฎุฑุงุฌ ูุชุงุจ ูุงูู ูุน ุฌููุน ุงูุชุญุณููุงุช
    """
    if config is None:
        try:
            from ultra_speed_config import auto_tune_config
            config = auto_tune_config()
            print("๐ ุงุณุชุฎุฏุงู ุงูุชูููู ุงููุงุฆู ุงูููุญุณููู ุชููุงุฆูุงู")
        except ImportError:
            config = PerformanceConfig()
            # ุงูุชูููู ุงูุฃูุซู ููุณุฑุนุฉ ุงููุตูู
            config.use_async = False  # ุงูุทุฑููุฉ ุงูุชูููุฏูุฉ ุฃูุซุฑ ุงุณุชูุฑุงุฑุงู
            config.max_workers = 20   # ุนุฏุฏ ุฃูุซู ูู ุงูุนูุงู
            config.use_lxml = True    # ุงุณุชุฎุฏุงู lxml ููุณุฑุนุฉ
            config.enable_caching = True  # ุชูุนูู ุงูุชุฎุฒูู ุงููุคูุช
            config.batch_size = 3000  # ุฏูุนุงุช ุฃูุจุฑ
            config.request_delay = 0.05  # ุชุฃุฎูุฑ ูููู ูุชุฌูุจ ุงูุญุธุฑ
            config.connection_pool_size = 24  # ุชุฌูุน ุงุชุตุงูุงุช ุฃูุจุฑ
            config.enable_compression = False  # ุนุฏู ุถุบุท ูููุงุช JSON
        
    print(f"๐ ุจุฏุก ุงุณุชุฎุฑุงุฌ ุงููุชุงุจ: {book_id}")
    print(f"โก ุฅุนุฏุงุฏุงุช ุงูุณุฑุนุฉ ุงููุงุฆูุฉ: workers={config.max_workers}, delay={config.request_delay}s, lxml={config.use_lxml}")
    print_separator()
    
    try:
        # ุงุณุชุฎุฑุงุฌ ุงููุชุงุจ
        print("๐ ุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงููุชุงุจ...")
        book = scrape_enhanced_book(book_id, max_pages=max_pages, extract_content=True, config=config)
        
        # ุชุญุฏูุฏ ูุฌูุฏ ุงูุฅุฎุฑุงุฌ
        if not output_dir:
            output_dir = os.path.join(current_dir, "enhanced_books")
        
        os.makedirs(output_dir, exist_ok=True)
        
        # ุฅูุดุงุก ุงุณู ุงูููู
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        extension = '.json.gz' if config.enable_compression else '.json'
        filename = f"enhanced_book_{book_id}_{timestamp}{extension}"
        output_path = os.path.join(output_dir, filename)
        
        # ุญูุธ ุงููุชุงุจ
        print("๐พ ุญูุธ ุงูุจูุงูุงุช...")
        save_enhanced_book_to_json(book, output_path, config)
        
        # ุทุจุงุนุฉ ุงููุชุงุฆุฌ
        print("\nโ ุชู ุงุณุชุฎุฑุงุฌ ุงููุชุงุจ ุจูุฌุงุญ!")
        print_separator()
        print(f"๐ ุงูุนููุงู: {book.title}")
        print(f"๐จโ๐ ุงููุคูู(ูู): {', '.join(author.name for author in book.authors)}")
        
        if book.publisher:
            print(f"๐ข ุงููุงุดุฑ: {book.publisher.name}")
            if book.publisher.location:
                print(f"๐ ุงููููุน: {book.publisher.location}")
        
        if book.book_section:
            print(f"๐ ุงููุณู: {book.book_section.name}")
        
        if book.edition:
            edition_info = f"๐ ุงูุทุจุนุฉ: {book.edition}"
            if book.edition_number:
                edition_info += f" (ุฑูู: {book.edition_number})"
            print(edition_info)
        
        if book.publication_year:
            year_info = f"๐ ุณูุฉ ุงููุดุฑ: {book.publication_year} ู"
            if book.edition_date_hijri:
                year_info += f" ({book.edition_date_hijri} ูู)"
            print(year_info)
        
        print(f"๐ ุนุฏุฏ ุงูุตูุญุงุช: {len(book.pages)}")
        print(f"๐ ุนุฏุฏ ุงููุตูู: {len(book.index)}")
        print(f"๐ ุนุฏุฏ ุงูุฃุฌุฒุงุก: {len(book.volumes)}")
        
        if book.volume_links:
            print(f"๐ ุฑูุงุจุท ุงููุฌูุฏุงุช: {len(book.volume_links)}")
        
        if book.has_original_pagination:
            print("โ ูุณุชุฎุฏู ุชุฑููู ุงูุตูุญุงุช ุงูุฃุตูู")
        
        print(f"๐พ ุชู ุงูุญูุธ ูู: {output_path}")
        
        # ุฅุญุตุงุฆูุงุช ุฅุถุงููุฉ
        total_words = sum(page.word_count or 0 for page in book.pages)
        if total_words > 0:
            print(f"๐ ุฅุฌูุงูู ุงููููุงุช: {total_words:,}")
        
        return {
            'success': True,
            'book_id': book_id,
            'output_path': output_path,
            'book': book,
            'stats': {
                'pages': len(book.pages),
                'chapters': len(book.index),
                'volumes': len(book.volumes),
                'authors': len(book.authors),
                'words': total_words
            }
        }
        
    except Exception as e:
        logger.error(f"ูุดู ูู ุงุณุชุฎุฑุงุฌ ุงููุชุงุจ {book_id}: {e}")
        print(f"โ ุฎุทุฃ ูู ุงุณุชุฎุฑุงุฌ ุงููุชุงุจ: {e}")
        return {
            'success': False,
            'book_id': book_id,
            'error': str(e)
        }

def save_to_database(json_path: str, db_config: dict, config: PerformanceConfig = None) -> dict:
    """
    ุญูุธ ูุชุงุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญุณูุฉ
    """
    if config is None:
        config = PerformanceConfig()
        
    print(f"๐๏ธ ุญูุธ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...")
    print(f"๐ ุงููุณุงุฑ: {json_path}")
    print(f"โ๏ธ ุฅุนุฏุงุฏุงุช ุงูุฃุฏุงุก: batch={config.batch_size}, workers={config.max_workers}")
    print_separator()
    
    try:
        result = save_enhanced_json_to_database(json_path, db_config, config)
        
        print("โ ุชู ุญูุธ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
        print_separator()
        print(f"๐ ูุนุฑู ุงููุชุงุจ: {result['book_id']}")
        print(f"๐ ุงูุตูุญุงุช: {result['total_pages']}")
        print(f"๐ ุงููุตูู: {result['total_chapters']}")
        print(f"๐ฅ ุงููุคูููู: {result['total_authors']}")
        print(f"๐ ุงูุฃุฌุฒุงุก: {result['total_volumes']}")
        
        if result.get('total_volume_links', 0) > 0:
            print(f"๐ ุฑูุงุจุท ุงููุฌูุฏุงุช: {result['total_volume_links']}")
        
        if result.get('publisher'):
            print(f"๐ข ุงููุงุดุฑ: {result['publisher']}")
        
        if result.get('book_section'):
            print(f"๐ ุงููุณู: {result['book_section']}")
        
        if result.get('has_original_pagination'):
            print("โ ุชุฑููู ุฃุตูู: ูุนู")
        
        # ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก
        if 'performance' in result:
            perf = result['performance']
            print(f"โฑ๏ธ ุฒูู ุงูุญูุธ: {perf['elapsed_time']:.2f} ุซุงููุฉ")
            print(f"โก ุณุฑุนุฉ ุงูุญูุธ: {perf['pages_per_second']:.2f} ุตูุญุฉ/ุซุงููุฉ")
            if perf['parallel_enabled']:
                print(f"๐ ุงูุชูุงุฒู: ููุนู ({perf['max_workers']} ุนูุงู)")
            print(f"๐ฆ ุญุฌู ุงูุฏูุนุฉ: {perf['batch_size']}")
        
        return {
            'success': True,
            'result': result
        }
        
    except Exception as e:
        logger.error(f"ูุดู ูู ุญูุธ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        print(f"โ ุฎุทุฃ ูู ุญูุธ ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def check_book_in_database(book_id: str, db_config: dict) -> dict:
    """
    ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงููุชุงุจ ููุฌูุฏุงู ุจุงููุนู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    
    Args:
        book_id: ูุนุฑู ุงููุชุงุจ ูู ุงูุดุงููุฉ
        db_config: ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
        
    Returns:
        dict: ูุชูุฌุฉ ุงูุชุญูู ูุน ููุชุงุญ exists ูุดูุฑ ุฅูู ูุฌูุฏ ุงููุชุงุจ
    """
    try:
        # ุงุณุชุฎุฏุงู ูุนุฑู ุงููุชุงุจ ููุง ูู ุจุฏูู ุฅุถุงูุฉ BK
        shamela_id = book_id.strip()
        
        with EnhancedShamelaDatabaseManager(db_config) as db:
            exists = db.check_book_exists(shamela_id)
        
        return {
            'success': True,
            'exists': exists,
            'book_id': book_id,
            'shamela_id': shamela_id
        }
    except Exception as e:
        logger.error(f"ูุดู ูู ุงูุชุญูู ูู ูุฌูุฏ ุงููุชุงุจ {book_id}: {e}")
        return {
            'success': False,
            'exists': False,
            'book_id': book_id,
            'error': str(e)
        }

def extract_and_save_book(book_id: str, max_pages: int = None, 
                         db_config: dict = None, output_dir: str = None) -> dict:
    """
    ุงุณุชุฎุฑุงุฌ ูุชุงุจ ูุญูุธู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    ููุงุญุธุฉ: ูุฐู ุงูุฏุงูุฉ ุชุณุชุฎุฑุฌ ุงููุชุงุจ ูุจุงุดุฑุฉ ุฏูู ุงูุชุญูู ูู ูุฌูุฏู ูุณุจูุงู.
    ููุชุญูู ูู ูุฌูุฏ ุงููุชุงุจุ ุงุณุชุฎุฏู ุงูุฃูุฑ check ุฃููุงู.
    """
    print_header()
    
    # ุงุณุชุฎุฑุงุฌ ุงููุชุงุจ
    extraction_result = extract_book_full(book_id, max_pages, output_dir)
    
    if not extraction_result['success']:
        return extraction_result
    
    print_separator()
    
    # ุญูุธ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฅุฐุง ุชู ุชูููุฑ ุงูุฅุนุฏุงุฏุงุช
    if db_config:
        db_result = save_to_database(extraction_result['output_path'], db_config)
        
        extraction_result['database'] = db_result
        
        if db_result['success']:
            extraction_result['database_book_id'] = db_result['result']['book_id']
    
    return extraction_result

def create_database_tables(db_config: dict) -> dict:
    """
    ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญุณูุฉ
    """
    print("๐๏ธ ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญุณูุฉ...")
    print_separator()
    
    try:
        with EnhancedShamelaDatabaseManager(db_config) as db:
            db.create_enhanced_tables()
        
        print("โ ุชู ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
        
        return {'success': True}
        
    except Exception as e:
        logger.error(f"ูุดู ูู ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def get_database_stats(book_id: int, db_config: dict) -> dict:
    """
    ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ูุชุงุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    """
    print(f"๐ ุฌุงุฑู ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงููุชุงุจ: {book_id}")
    print_separator()
    
    try:
        with EnhancedShamelaDatabaseManager(db_config) as db:
            stats = db.get_enhanced_book_stats(book_id)
        
        book = stats.get('book', {})
        
        print("๐ ุฅุญุตุงุฆูุงุช ุงููุชุงุจ:")
        print_separator()
        print(f"๐ ุงูุนููุงู: {book.get('title', 'ุบูุฑ ูุญุฏุฏ')}")
        print(f"๐ข ูุนุฑู ุงูุดุงููุฉ: {book.get('shamela_id', 'ุบูุฑ ูุญุฏุฏ')}")
        
        if book.get('edition'):
            edition_info = f"๐ ุงูุทุจุนุฉ: {book['edition']}"
            if book.get('edition_number'):
                edition_info += f" (ุฑูู: {book['edition_number']})"
            print(edition_info)
        
        if book.get('publication_year'):
            year_info = f"๐ ุณูุฉ ุงููุดุฑ: {book['publication_year']} ู"
            if book.get('edition_date_hijri'):
                year_info += f" ({book['edition_date_hijri']} ูู)"
            print(year_info)
        
        if book.get('publisher_name'):
            print(f"๐ข ุงููุงุดุฑ: {book['publisher_name']}")
        
        if book.get('section_name'):
            print(f"๐ ุงููุณู: {book['section_name']}")
        
        if book.get('has_original_pagination'):
            print("โ ุชุฑููู ุฃุตูู: ูุนู")
        else:
            print("โ ุชุฑููู ุฃุตูู: ูุง")
        
        print(f"๐ ุนุฏุฏ ุงูุตูุญุงุช: {stats.get('pages_count', 0)}")
        print(f"๐ ุนุฏุฏ ุงููุตูู: {stats.get('chapters_count', 0)}")
        print(f"๐ฅ ุนุฏุฏ ุงููุคูููู: {stats.get('authors_count', 0)}")
        print(f"๐ ุนุฏุฏ ุงูุฃุฌุฒุงุก: {stats.get('volumes_count', 0)}")
        print(f"๐ ุนุฏุฏ ุฑูุงุจุท ุงููุฌูุฏุงุช: {stats.get('volume_links_count', 0)}")
        print(f"๐ ุฅุฌูุงูู ุงููููุงุช: {stats.get('total_words', 0):,}")
        
        return {
            'success': True,
            'stats': stats
        }
        
    except Exception as e:
        logger.error(f"ูุดู ูู ุงูุญุตูู ุนูู ุงูุฅุญุตุงุฆูุงุช: {e}")
        print(f"โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุฅุญุตุงุฆูุงุช: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def main():
    """
    ุงููุธููุฉ ุงูุฑุฆูุณูุฉ ููุณูุฑุจุช
    """
    parser = argparse.ArgumentParser(
        description="ุณูุฑุจุช ุงูููุชุจุฉ ุงูุดุงููุฉ ุงููุญุณู - ุงุณุชุฎุฑุงุฌ ูุญูุธ ุงููุชุจ ูุน ุฌููุน ุงูุชุญุณููุงุช",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
ุฃูุซูุฉ ุงูุงุณุชุฎุฏุงู:

1. ุงุณุชุฎุฑุงุฌ ูุชุงุจ ููุท:
   python enhanced_runner.py extract 12106

2. ุงุณุชุฎุฑุงุฌ ูุชุงุจ ูุญูุธู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:
   python enhanced_runner.py extract 12106 --db-host localhost --db-user root --db-password secret --db-name bms

3. ุญูุธ ููู JSON ููุฌูุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:
   python enhanced_runner.py save-db enhanced_book_12106.json --db-host localhost --db-user root --db-password secret --db-name bms

4. ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:
   python enhanced_runner.py create-tables --db-host localhost --db-user root --db-password secret --db-name bms

5. ุนุฑุถ ุฅุญุตุงุฆูุงุช ูุชุงุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:
   python enhanced_runner.py stats 123 --db-host localhost --db-user root --db-password secret --db-name bms

6. ุงูุชุญูู ูู ูุฌูุฏ ูุชุงุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:
   python enhanced_runner.py check 12106 --db-host localhost --db-user root --db-password secret --db-name bms
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='ุงูุฃูุงูุฑ ุงููุชุงุญุฉ')
    
    # ุฃูุฑ ุงูุงุณุชุฎุฑุงุฌ
    extract_parser = subparsers.add_parser('extract', help='ุงุณุชุฎุฑุงุฌ ูุชุงุจ ูู ุงูููุชุจุฉ ุงูุดุงููุฉ')
    extract_parser.add_argument('book_id', help='ูุนุฑู ุงููุชุงุจ ูู ุงูููุชุจุฉ ุงูุดุงููุฉ')
    extract_parser.add_argument('--max-pages', type=int, help='ุงูุนุฏุฏ ุงูุฃูุตู ููุตูุญุงุช')
    extract_parser.add_argument('--output-dir', help='ูุฌูุฏ ุงูุฅุฎุฑุงุฌ')
    
    # ุฃูุฑ ุงูุญูุธ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    save_parser = subparsers.add_parser('save-db', help='ุญูุธ ููู JSON ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
    save_parser.add_argument('json_file', help='ูุณุงุฑ ููู JSON')
    
    # ุฃูุฑ ุฅูุดุงุก ุงูุฌุฏุงูู
    tables_parser = subparsers.add_parser('create-tables', help='ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
    
    # ุฃูุฑ ุงูุฅุญุตุงุฆูุงุช
    stats_parser = subparsers.add_parser('stats', help='ุนุฑุถ ุฅุญุตุงุฆูุงุช ูุชุงุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
    stats_parser.add_argument('book_id', type=int, help='ูุนุฑู ุงููุชุงุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
    
    # ุฃูุฑ ุงูุชุญูู ูู ูุฌูุฏ ุงููุชุงุจ
    check_parser = subparsers.add_parser('check', help='ุงูุชุญูู ูู ูุฌูุฏ ูุชุงุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
    check_parser.add_argument('book_id', help='ูุนุฑู ุงููุชุงุจ ูู ุงูููุชุจุฉ ุงูุดุงููุฉ')
    
    # ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช (ูุดุชุฑูุฉ)
    for subparser in [extract_parser, save_parser, tables_parser, stats_parser, check_parser]:
        subparser.add_argument('--db-host', default='localhost', help='ุนููุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
        subparser.add_argument('--db-port', type=int, default=3306, help='ูููุฐ ูุงุนุฏุฉ ุงูุจูุงูุงุช')
        subparser.add_argument('--db-user', default='root', help='ุงุณู ุงููุณุชุฎุฏู')
        subparser.add_argument('--db-password', help='ูููุฉ ูุฑูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช')
        subparser.add_argument('--db-name', default='bms', help='ุงุณู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
    db_config = None
    if any([args.db_host, args.db_user, args.db_name]):
        # ุทูุจ ูููุฉ ุงููุฑูุฑ ููุท ุฅุฐุง ูู ูุชู ุชูุฑูุฑูุง ููุงุฆูุงู ููู ูุชู ุชุนููู ูุชุบูุฑ ุงูุจูุฆุฉ
        if args.db_password is None:
            # ุชุญูู ูู ูุฌูุฏ ูุชุบูุฑ ุงูุจูุฆุฉ ูุชุฌูุจ ุทูุจ ูููุฉ ุงููุฑูุฑ
            password_from_env = os.environ.get('DB_PASSWORD_PROVIDED')
            if password_from_env and password_from_env.lower() == 'true':
                # ุงุณุชุฎุฏุงู ูููุฉ ูุฑูุฑ ูุงุฑุบุฉ ุฅุฐุง ุชู ุชุญุฏูุฏ ุฃููุง ูุชููุฑุฉ ูู ุงูุจูุฆุฉ
                args.db_password = ""
            else:
                import getpass
                args.db_password = getpass.getpass("ูููุฉ ูุฑูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช: ")
        
        db_config = {
            'host': args.db_host,
            'port': args.db_port,
            'user': args.db_user,
            'password': args.db_password,
            'database': args.db_name
        }
    
    try:
        if args.command == 'extract':
            result = extract_and_save_book(
                args.book_id,
                max_pages=args.max_pages,
                db_config=db_config,
                output_dir=args.output_dir
            )
            
            if not result['success']:
                sys.exit(1)
        
        elif args.command == 'save-db':
            if not db_config:
                print("โ ุฎุทุฃ: ูุฌุจ ุชุญุฏูุฏ ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช")
                sys.exit(1)
            
            if not os.path.exists(args.json_file):
                print(f"โ ุฎุทุฃ: ุงูููู ุบูุฑ ููุฌูุฏ: {args.json_file}")
                sys.exit(1)
            
            result = save_to_database(args.json_file, db_config)
            
            if not result['success']:
                sys.exit(1)
        
        elif args.command == 'create-tables':
            if not db_config:
                print("โ ุฎุทุฃ: ูุฌุจ ุชุญุฏูุฏ ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช")
                sys.exit(1)
            
            result = create_database_tables(db_config)
            
            if not result['success']:
                sys.exit(1)
        
        elif args.command == 'stats':
            if not db_config:
                print("โ ุฎุทุฃ: ูุฌุจ ุชุญุฏูุฏ ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช")
                sys.exit(1)
            
            result = get_database_stats(args.book_id, db_config)
            
            if not result['success']:
                sys.exit(1)
        
        elif args.command == 'check':
            if not db_config:
                print("โ ุฎุทุฃ: ูุฌุจ ุชุญุฏูุฏ ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช")
                sys.exit(1)
            
            result = check_book_in_database(args.book_id, db_config)
            
            if not result['success']:
                print(f"โ ุฎุทุฃ ูู ุงูุชุญูู ูู ุงููุชุงุจ: {result.get('error', 'ุฎุทุฃ ุบูุฑ ูุนุฑูู')}")
                sys.exit(1)
            
            if result['exists']:
                print(f"โ ุงููุชุงุจ {args.book_id} ููุฌูุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
                print_separator()
                print("๐ ุชูุช ุนูููุฉ ุงูุชุญูู ุจูุฌุงุญ!")
                # ุฑูุฒ ุงูุฎุฑูุฌ 0 = ุงููุชุงุจ ููุฌูุฏ
                sys.exit(0)
            else:
                print(f"โ ุงููุชุงุจ {args.book_id} ุบูุฑ ููุฌูุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
                # ุฑูุฒ ุงูุฎุฑูุฌ 1 = ุงููุชุงุจ ุบูุฑ ููุฌูุฏ - ูุง ูุทุจุน ุฑุณุงูุฉ ูุฌุงุญ
                sys.exit(1)
        
        print_separator()
        print("๐ ุชูุช ุงูุนูููุฉ ุจูุฌุงุญ!")
        
    except KeyboardInterrupt:
        print("\nโ ุชู ุฅูุบุงุก ุงูุนูููุฉ ุจูุงุณุทุฉ ุงููุณุชุฎุฏู")
        sys.exit(1)
    except Exception as e:
        logger.error(f"ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")
        print(f"โ ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
