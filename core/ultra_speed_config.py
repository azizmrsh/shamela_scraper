#!/usr/bin/env python3
"""
ุชูููู ุงูุณุฑุนุฉ ุงููุงุฆูุฉ - Ultra Speed Configuration
ุฅุนุฏุงุฏุงุช ูุชูุฏูุฉ ูุชุญููู ุฃูุตู ุณุฑุนุฉ ููููุฉ
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))
from enhanced_shamela_scraper import PerformanceConfig

class UltraSpeedConfig(PerformanceConfig):
    """ุชูููู ุงูุณุฑุนุฉ ุงููุงุฆูุฉ"""
    
    def __init__(self):
        super().__init__()
        
        # โก ุฅุนุฏุงุฏุงุช ุงูุดุจูุฉ ุงููุงุฆูุฉ
        self.max_workers = 24  # ุฃูุตู ุนุฏุฏ ุนูุงู
        self.connection_pool_size = 30  # ุชุฌูุน ุงุชุตุงูุงุช ุฃูุจุฑ
        self.request_delay = 0.05  # ุฃูู ุชุฃุฎูุฑ ูููู
        self.max_retries = 2  # ุชูููู ุงููุญุงููุงุช
        self.timeout = 5  # ุงูุชุธุงุฑ ุฃูู
        
        # ๐ ุฅุนุฏุงุฏุงุช ุงููุนุงูุฌุฉ ุงููุชูุฏูุฉ
        self.use_async = False  # ุซุงุจุช ููุงุณุชูุฑุงุฑ
        self.use_lxml = True  # ุฃุณุฑุน ูุญูู
        self.enable_caching = True  # ุชุฎุฒูู ูุคูุช ุฐูู
        self.batch_size = 5000  # ุฏูุนุงุช ุถุฎูุฉ
        self.async_batch_size = 20  # ุฏูุนุงุช ุบูุฑ ูุชุฒุงููุฉ ุฃูุจุฑ
        
        # ๐พ ุชุญุณููุงุช ุงูุฐุงูุฑุฉ
        self.memory_optimization = True
        self.compress_responses = True
        self.clear_cache_interval = 1000
        self.enable_compression = False  # ุนุฏู ุถุบุท ูููุงุช JSON
        
        # ๐ฏ ุชุญุณููุงุช ุฐููุฉ
        self.adaptive_delay = True  # ุชุฃุฎูุฑ ูุชููู
        self.smart_retry = True  # ุฅุนุงุฏุฉ ูุญุงููุฉ ุฐููุฉ
        self.connection_reuse = True  # ุฅุนุงุฏุฉ ุงุณุชุฎุฏุงู ุงูุงุชุตุงูุงุช
        
        # ๐ ูุฑุงูุจุฉ ุงูุฃุฏุงุก
        self.performance_monitoring = True
        self.log_performance_stats = True

def get_ultra_speed_config():
    """ุงูุญุตูู ุนูู ุชูููู ุงูุณุฑุนุฉ ุงููุงุฆูุฉ"""
    return UltraSpeedConfig()

# ุฅุนุฏุงุฏุงุช ุฎุงุตุฉ ุจุฃููุงุน ุงููุชุจ
BOOK_SIZE_CONFIGS = {
    'small': {  # ุฃูู ูู 100 ุตูุญุฉ
        'workers': 16,
        'batch_size': 2000,
        'delay': 0.1
    },
    'medium': {  # 100-1000 ุตูุญุฉ
        'workers': 20,
        'batch_size': 3000,
        'delay': 0.08
    },
    'large': {  # 1000-5000 ุตูุญุฉ
        'workers': 24,
        'batch_size': 4000,
        'delay': 0.05
    },
    'huge': {  # ุฃูุซุฑ ูู 5000 ุตูุญุฉ
        'workers': 28,
        'batch_size': 5000,
        'delay': 0.03,
        'use_multiprocessing': True
    }
}

def get_optimal_config_for_book_size(page_count):
    """ุงูุญุตูู ุนูู ุงูุชูููู ุงูุฃูุซู ุญุณุจ ุญุฌู ุงููุชุงุจ"""
    config = UltraSpeedConfig()
    
    if page_count < 100:
        # ูุชุจ ุตุบูุฑุฉ - ุทุฑููุฉ ุชูููุฏูุฉ ุณุฑูุนุฉ
        settings = BOOK_SIZE_CONFIGS['small']
        config.use_async = False
    elif page_count < 500:
        # ูุชุจ ูุชูุณุทุฉ - ุงุณุชุฎุฏุงู threading
        settings = BOOK_SIZE_CONFIGS['medium'] 
        config.use_async = False
        config.multiprocessing_threshold = 999999  # ุชุนุทูู multiprocessing
    elif page_count < 1000:
        # ูุชุจ ูุจูุฑุฉ - ุชูุนูู async ููู ุจุฏูู multiprocessing
        settings = BOOK_SIZE_CONFIGS['large']
        config.use_async = True
        config.multiprocessing_threshold = 2000  # ุฑูุน ุงูุนุชุจุฉ
    else:
        # ูุชุจ ุถุฎูุฉ - ุชูุนูู ุงููุนุงูุฌุฉ ูุชุนุฏุฏุฉ ุงูุนูููุงุช
        settings = BOOK_SIZE_CONFIGS['huge']
        config.use_async = True
        config.multiprocessing_threshold = 200  # ุชูุนูู multiprocessing ูููุชุจ ุงูุถุฎูุฉ
        config.use_multiprocessing = True
    
    # ุชุทุจูู ุงูุฅุนุฏุงุฏุงุช
    config.max_workers = settings['workers']
    config.batch_size = settings['batch_size']
    config.request_delay = settings['delay']
    
    return config

# ุงุฎุชุจุงุฑ ุณุฑุนุฉ ุงูุดุจูุฉ ูุชุญุณูู ุงูุฅุนุฏุงุฏุงุช ุชููุงุฆูุงู
def auto_tune_config():
    """ุถุจุท ุชููุงุฆู ููุฅุนุฏุงุฏุงุช ุญุณุจ ุณุฑุนุฉ ุงูุดุจูุฉ"""
    import time
    import requests
    
    config = UltraSpeedConfig()
    
    # ุงุฎุชุจุงุฑ ุณุฑุนุฉ ุงูุงุชุตุงู
    try:
        start_time = time.time()
        response = requests.get('https://shamela.ws', timeout=5)
        ping_time = time.time() - start_time
        
        if ping_time < 0.5:
            # ุงุชุตุงู ุณุฑูุน ุฌุฏุงู
            config.max_workers = 32
            config.request_delay = 0.02
            config.batch_size = 8000
        elif ping_time < 1.0:
            # ุงุชุตุงู ุณุฑูุน
            config.max_workers = 24
            config.request_delay = 0.05
            config.batch_size = 5000
        elif ping_time < 2.0:
            # ุงุชุตุงู ูุชูุณุท
            config.max_workers = 16
            config.request_delay = 0.1
            config.batch_size = 3000
        else:
            # ุงุชุตุงู ุจุทูุก
            config.max_workers = 8
            config.request_delay = 0.2
            config.batch_size = 1000
            
    except Exception:
        # ูู ุญุงูุฉ ูุดู ุงูุงุฎุชุจุงุฑุ ุงุณุชุฎุฏู ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ
        pass
    
    return config

if __name__ == "__main__":
    # ุงุฎุชุจุงุฑ ุงูุชูููู ุงููุงุฆู
    config = get_ultra_speed_config()
    print("๐ ุชูููู ุงูุณุฑุนุฉ ุงููุงุฆูุฉ:")
    print(f"   ุงูุนูุงู: {config.max_workers}")
    print(f"   ุญุฌู ุงูุฏูุนุฉ: {config.batch_size}")
    print(f"   ุชุฌูุน ุงูุงุชุตุงูุงุช: {config.connection_pool_size}")
    print(f"   ุงูุชุฃุฎูุฑ: {config.request_delay}s")
    print(f"   lxml: {config.use_lxml}")
    print(f"   ุงูุชุฎุฒูู ุงููุคูุช: {config.enable_caching}")
